/*
This is an autogenerated file, generated using the EzPC compiler.
*/


#define BITLEN_32
#define SCI_OT


#include "globals.h"
#include "functionalities_wrapper.h"
#include <iostream>
using namespace std;

template<typename T>
T* make_array(size_t s1){
return new T[s1];
}

template<typename T>
T* make_array(size_t s1, size_t s2){
return new T[s1*s2];
}

template<typename T>
T* make_array(size_t s1, size_t s2, size_t s3){
return new T[s1*s2*s3];
}

template<typename T>
T* make_array(size_t s1, size_t s2, size_t s3, size_t s4){
return new T[s1*s2*s3*s4];
}

template<typename T>
T* make_array(size_t s1, size_t s2, size_t s3, size_t s4, size_t s5){
return new T[s1*s2*s3*s4*s5];
}






























void MatAddBroadCast2(int32_t s1, int32_t s2, uint32_t* A, uint32_t* B, uint32_t* outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = SecretAdd(Arr2DIdxRowM(A,s1,s2,i1,i2), Arr1DIdxRowM(B,s2,i2));
}
}
}

void MatAdd2(int32_t s1, int32_t s2, uint32_t* A, uint32_t* B, uint32_t* outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = SecretAdd(Arr2DIdxRowM(A,s1,s2,i1,i2), Arr2DIdxRowM(B,s1,s2,i1,i2));
}
}
}

void MatAddBroadCast4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint32_t* A, uint32_t* B, uint32_t* outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = SecretAdd(Arr4DIdxRowM(A,s1,s2,s3,s4,i1,i2,i3,i4), Arr1DIdxRowM(B,s4,i4));
}
}
}
}
}

void MatAdd4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint32_t* A, uint32_t* B, uint32_t* outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = SecretAdd(Arr4DIdxRowM(A,s1,s2,s3,s4,i1,i2,i3,i4), Arr4DIdxRowM(B,s1,s2,s3,s4,i1,i2,i3,i4));
}
}
}
}
}

void MatAddBroadCast5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint32_t* A, uint32_t* B, uint32_t* outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = SecretAdd(Arr5DIdxRowM(A,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5), Arr1DIdxRowM(B,s5,i5));
}
}
}
}
}
}

void MatAdd5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint32_t* A, uint32_t* B, uint32_t* outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = SecretAdd(Arr5DIdxRowM(A,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5), Arr5DIdxRowM(B,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5));
}
}
}
}
}
}

void CreateTensor1(int32_t s1, int32_t val, int32_t* arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
Arr1DIdxRowM(arr,s1,i1) = val;
}
}

void CreateTensor2(int32_t s1, int32_t s2, int32_t val, int32_t* arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(arr,s1,s2,i1,i2) = val;
}
}
}

void CreateTensor3(int32_t s1, int32_t s2, int32_t s3, int32_t val, int32_t* arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3) = val;
}
}
}
}

void CreateTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t val, int32_t* arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4) = val;
}
}
}
}
}

void CreateTensor5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t val, int32_t* arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = val;
}
}
}
}
}
}

void CopyTensor1(int32_t s1, uint32_t* targetArr, uint32_t* fromArr, uint32_t* ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
Arr1DIdxRowM(targetArr,s1,i1) = Arr1DIdxRowM(fromArr,s1,i1);
}
}

void CopyTensor2(int32_t s1, int32_t s2, uint32_t* targetArr, uint32_t* fromArr, uint32_t* ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(targetArr,s1,s2,i1,i2) = Arr2DIdxRowM(fromArr,s1,s2,i1,i2);
}
}
}

void CopyTensor3(int32_t s1, int32_t s2, int32_t s3, uint32_t* targetArr, uint32_t* fromArr, uint32_t* ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
Arr3DIdxRowM(targetArr,s1,s2,s3,i1,i2,i3) = Arr3DIdxRowM(fromArr,s1,s2,s3,i1,i2,i3);
}
}
}
}

void CopyTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint32_t* targetArr, uint32_t* fromArr, uint32_t* ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(targetArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(fromArr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
}

void CreateIdentity11(int32_t s1, uint32_t* fromArr, uint32_t* newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
Arr1DIdxRowM(newArr,s1,i1) = Arr1DIdxRowM(fromArr,s1,i1);
}
}

void CreateIdentity22(int32_t s1, int32_t s2, uint32_t* fromArr, uint32_t* newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(newArr,s1,s2,i1,i2) = Arr2DIdxRowM(fromArr,s1,s2,i1,i2);
}
}
}

void CreateIdentity33(int32_t s1, int32_t s2, int32_t s3, uint32_t* fromArr, uint32_t* newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
Arr3DIdxRowM(newArr,s1,s2,s3,i1,i2,i3) = Arr3DIdxRowM(fromArr,s1,s2,s3,i1,i2,i3);
}
}
}
}

void CreateIdentity44(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint32_t* fromArr, uint32_t* newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(newArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(fromArr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
}

void CreateCopy2211(int32_t s1, int32_t s2, int32_t inps1, int32_t inps2, uint32_t* inArr, int32_t perDimSize, int32_t* beginIdx, int32_t* sizeIdx, uint32_t* outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(outArr,s1,s2,i,j) = Arr2DIdxRowM(inArr,inps1,inps2,(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)0) + i),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)1) + j));
}
}
}

void CreateCopy5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, uint32_t* inArr, int32_t perDimSize, int32_t* beginIdx, int32_t* sizeIdx, uint32_t* outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i,j,k,l,m) = Arr5DIdxRowM(inArr,inps1,inps2,inps3,inps4,inps5,(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)0) + i),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)1) + j),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)2) + k),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)3) + l),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)4) + m));
}
}
}
}
}
}

void Concat2T222(int32_t s1, int32_t s2, int32_t inp1s1, int32_t inp1s2, uint32_t* inp1, int32_t inp2s1, int32_t inp2s2, uint32_t* inp2, int32_t axis, uint32_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp1,inp1s1,inp1s2,i1,i2);
} else {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp2,inp2s1,inp2s2,(i1 - inp1s1),i2);
}
} else {
if ((i2 < inp1s2)) {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp1,inp1s1,inp1s2,i1,i2);
} else {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp2,inp2s1,inp2s2,i1,(i2 - inp1s2));
}
}
}
}
}

void Concat2T444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint32_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint32_t* inp2, int32_t axis, uint32_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
}
}
}
}
}
}
}
}
}

void Split44(int32_t O1, int32_t O2, int32_t O3, int32_t O4, int32_t I1, int32_t I2, int32_t I3, int32_t I4, uint32_t* inp, int32_t axis, int32_t curCount, int32_t total, uint32_t* out){
for (uint32_t o1 =  (int32_t)0; o1 < O1; o1++){
for (uint32_t o2 =  (int32_t)0; o2 < O2; o2++){
for (uint32_t o3 =  (int32_t)0; o3 < O3; o3++){
for (uint32_t o4 =  (int32_t)0; o4 < O4; o4++){

int32_t i1 = o1;

int32_t i2 = o2;

int32_t i3 = o3;

int32_t i4 = o4;
if ((axis ==  (int32_t)0)) {
i1 = (((I1 / total) * curCount) + o1);
}
if ((axis ==  (int32_t)1)) {
i2 = (((I2 / total) * curCount) + o2);
}
if ((axis ==  (int32_t)2)) {
i3 = (((I3 / total) * curCount) + o3);
}
if ((axis ==  (int32_t)3)) {
i4 = (((I4 / total) * curCount) + o4);
}
Arr4DIdxRowM(out,O1,O2,O3,O4,o1,o2,o3,o4) = Arr4DIdxRowM(inp,I1,I2,I3,I4,i1,i2,i3,i4);
}
}
}
}
}

void Conv2DReshapeFilter(int32_t FH, int32_t FW, int32_t CI, int32_t CO, uint32_t* inputArr, uint32_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,((FH * FW) * CI),co,linIdx) = Arr4DIdxRowM(inputArr,FH,FW,CI,CO,fh,fw,ci,co);
}
}
}
}
}

void Conv2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, uint32_t* inputArr, uint32_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
Arr4DIdxRowM(outputArr,N,finalH,finalW,CO,n,h,w,co) = Arr2DIdxRowM(inputArr,CO,((N * finalH) * finalW),co,((((n * finalH) * finalW) + (h * finalW)) + w));
}
}
}
}
}

void Conv2DReshapeInput(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint32_t* inputArr, uint32_t* outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint32_t val = funcSSCons( (int32_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int32_t)0);
} else {
val = Arr4DIdxRowM(inputArr,N,H,W,CI,n,curPosH,curPosW,ci);
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((fh * FW) * CI) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2D(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * newH) * newW);

uint32_t* filterReshaped = make_array<uint32_t>(reshapedFilterRows, reshapedFilterCols);

uint32_t* inputReshaped = make_array<uint32_t>(reshapedIPRows, reshapedIPCols);

uint32_t* matmulOP = make_array<uint32_t>(reshapedFilterRows, reshapedIPCols);
Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv2DLoopInner(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t outH, int32_t outW, int32_t G, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){

int32_t GIS = (CI / G);

int32_t GOS = (CO / G);
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t cog =  (int32_t)0; cog < GOS; cog++){
for (uint32_t cig =  (int32_t)0; cig < GIS; cig++){
for (uint32_t g =  (int32_t)0; g < G; g++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){

uint32_t val = funcSSCons( (int32_t)0);

int32_t ci = ((GIS * g) + cig);

int32_t co = ((GOS * g) + cog);

int32_t curPosH = ((strideH * h) - zPadHLeft);
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){

int32_t curPosW = ((strideW * w) - zPadWLeft);
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
if (((((curPosH >=  (int32_t)0) && (curPosW >=  (int32_t)0)) && (curPosH < H)) && (curPosW < W))) {
val = SecretAdd(val, SecretMult(Arr4DIdxRowM(inputArr,N,H,W,CI,n,curPosH,curPosW,ci), Arr4DIdxRowM(filterArr,FH,FW,(CI / G),CO,fh,fw,(ci / G),co)));
}
curPosW = (curPosW +  (int32_t)1);
}
curPosH = (curPosH +  (int32_t)1);
}
Arr4DIdxRowM(outArr,N,outH,outW,CO,n,h,w,co) = SecretAdd(Arr4DIdxRowM(outArr,N,outH,outW,CO,n,h,w,co), val);
}
}
}
}
}
}
}

void Conv2DLoop(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){

int32_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int32_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, outH, outW, G, inputArr, filterArr, outArr);
}

void Conv2DReshapeFilterGroup(int32_t FH, int32_t FW, int32_t CI, int32_t CO, int32_t g, int32_t G, uint32_t* inputArr, uint32_t* outputArr){

int32_t CIG = (CI / G);

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){

int32_t linIdx = ((((fh * FW) * CIG) + (fw * CIG)) + ci);
Arr2DIdxRowM(outputArr,(CO / G),((FH * FW) * (CI / G)),co,linIdx) = Arr4DIdxRowM(inputArr,FH,FW,(CI / G),CO,fh,fw,ci,(co + startCO));
}
}
}
}
}

void Conv2DReshapeMatMulOPGroup(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, int32_t g, int32_t G, uint32_t* inputArr, uint32_t* outputArr){

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
Arr4DIdxRowM(outputArr,N,finalH,finalW,CO,n,h,w,(co + startCO)) = Arr2DIdxRowM(inputArr,(CO / G),((N * finalH) * finalW),co,((((n * finalH) * finalW) + (h * finalW)) + w));
}
}
}
}
}

void Conv2DReshapeInputGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t g, int32_t G, int32_t RRows, int32_t RCols, uint32_t* inputArr, uint32_t* outputArr){

int32_t linIdxFilterMult =  (int32_t)0;

int32_t CIG = (CI / G);
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint32_t val = funcSSCons( (int32_t)0);

int32_t startCI = (g * CIG);
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int32_t)0);
} else {
val = Arr4DIdxRowM(inputArr,N,H,W,CI,n,curPosH,curPosW,(ci + startCI));
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((fh * FW) * CIG) + (fw * CIG)) + ci),linIdxFilterMult) = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2DGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){

int32_t CIG = (CI / G);

int32_t reshapedFilterRows = (CO / G);

int32_t reshapedFilterCols = ((FH * FW) * CIG);

int32_t reshapedIPRows = ((FH * FW) * CIG);

int32_t outH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t outW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * outH) * outW);
for (uint32_t g =  (int32_t)0; g < G; g++){

uint32_t* inputReshaped = make_array<uint32_t>(reshapedIPRows, reshapedIPCols);

uint32_t* matmulOP = make_array<uint32_t>(reshapedFilterRows, reshapedIPCols);

uint32_t* filterReshaped = make_array<uint32_t>(reshapedFilterRows, reshapedFilterCols);
Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, g, G, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
}
}

void Conv3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CI, int32_t CO, uint32_t* inputArr, uint32_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,(((FD * FH) * FW) * CI),co,linIdx) = Arr5DIdxRowM(inputArr,FD,FH,FW,CI,CO,fd,fh,fw,ci,co);
}
}
}
}
}
}

void Conv3DReshapeMatMulOP(int32_t N, int32_t finalD, int32_t finalH, int32_t finalW, int32_t CO, uint32_t* inputArr, uint32_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t d =  (int32_t)0; d < finalD; d++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
Arr5DIdxRowM(outputArr,N,finalD,finalH,finalW,CO,n,d,h,w,co) = Arr2DIdxRowM(inputArr,CO,(((N * finalD) * finalH) * finalW),co,((((((n * finalD) * finalH) * finalW) + ((d * finalH) * finalW)) + (h * finalW)) + w));
}
}
}
}
}
}

void Conv3DReshapeInput(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint32_t* inputArr, uint32_t* outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadDLeft);

int32_t extremeRightBottomCornerD = ((D -  (int32_t)1) + zPadDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint32_t val = funcSSCons( (int32_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= D)) || ((curPosH <  (int32_t)0) || (curPosH >= H))) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int32_t)0);
} else {
val = Arr5DIdxRowM(inputArr,N,D,H,W,CI,n,curPosD,curPosH,curPosW,ci);
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

leftTopCornerD = (leftTopCornerD + strideD);
}

}
}

void Conv3D(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t newD = ((((D + (zPadDLeft + zPadDRight)) - FD) / strideD) +  (int32_t)1);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = (((N * newD) * newH) * newW);

uint32_t* filterReshaped = make_array<uint32_t>(reshapedFilterRows, reshapedFilterCols);

uint32_t* inputReshaped = make_array<uint32_t>(reshapedIPRows, reshapedIPCols);

uint32_t* matmulOP = make_array<uint32_t>(reshapedFilterRows, reshapedIPCols);
Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t d =  (int32_t)0; d < outD; d++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

uint32_t val = funcSSCons( (int32_t)0);
for (uint32_t fd = (d * strideD); fd < ((d * strideD) + FD); fd++){
for (uint32_t fh = (h * strideH); fh < ((h * strideH) + FH); fh++){
for (uint32_t fw = (w * strideW); fw < ((w * strideW) + FW); fw++){

int32_t curPosD = (fd - zPadDLeft);

int32_t curPosH = (fh - zPadHLeft);

int32_t curPosW = (fw - zPadWLeft);
if (((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W))) {

int32_t curFilterPosD = (fd - (d * strideD));

int32_t curFilterPosH = (fh - (h * strideH));

int32_t curFilterPosW = (fw - (w * strideW));
val = SecretAdd(val, SecretMult(Arr5DIdxRowM(inputArr,N,D,H,W,CI,n,curPosD,curPosH,curPosW,ci), Arr5DIdxRowM(filterArr,FD,FH,FW,CI,CO,curFilterPosD,curFilterPosH,curFilterPosW,ci,co)));
}
}
}
}
Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co) = SecretAdd(Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co), val);
}
}
}
}
}
}
}

void Conv3DLoop(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){

int32_t outD = ((((D - FD) + (zPadDLeft + zPadDRight)) / strideD) +  (int32_t)1);

int32_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int32_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, outD, outH, outW, inputArr, filterArr, outArr);
}

void ConvTranspose2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, uint32_t* inputArr, uint32_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
Arr4DIdxRowM(outputArr,N,finalH,finalW,CO,n,h,w,co) = Arr2DIdxRowM(inputArr,CO,((N * finalH) * finalW),co,((((n * finalH) * finalW) + (h * finalW)) + w));
}
}
}
}
}

void ConvTranspose2DReshapeFilter(int32_t FH, int32_t FW, int32_t CO, int32_t CI, uint32_t* inputArr, uint32_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,((FH * FW) * CI),co,linIdx) = Arr4DIdxRowM(inputArr,FH,FW,CO,CI,((FH -  (int32_t)1) - fh),((FW -  (int32_t)1) - fw),co,ci);
}
}
}
}
}

void ConvTranspose2DReshapeInput(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint32_t* inputArr, uint32_t* outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint32_t val = funcSSCons( (int32_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde)) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int32_t)0);
} else {
if ((((curPosH % strideH) ==  (int32_t)0) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = Arr4DIdxRowM(inputArr,N,HPrime,WPrime,CI,n,idxInputH,idxInputW,ci);
} else {
val = funcSSCons( (int32_t)0);
}
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((fh * FW) * CI) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

}
}

void ConvTranspose2D(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t H, int32_t W, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t reshapedIPCols = ((N * H) * W);

uint32_t* filterReshaped = make_array<uint32_t>(reshapedFilterRows, reshapedFilterCols);

uint32_t* inputReshaped = make_array<uint32_t>(reshapedIPRows, reshapedIPCols);

uint32_t* matmulOP = make_array<uint32_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t CI, uint32_t* inputArr, uint32_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,(((FD * FH) * FW) * CI),co,linIdx) = Arr5DIdxRowM(inputArr,FD,FH,FW,CO,CI,((FD -  (int32_t)1) - fd),((FH -  (int32_t)1) - fh),((FW -  (int32_t)1) - fw),co,ci);
}
}
}
}
}
}

void ConvTranspose3DReshapeInput(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint32_t* inputArr, uint32_t* outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadTrDLeft);

int32_t DPrimeTilde = (DPrime + ((DPrime -  (int32_t)1) * (strideD -  (int32_t)1)));

int32_t extremeRightBottomCornerD = ((DPrimeTilde -  (int32_t)1) + zPadTrDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint32_t val = funcSSCons( (int32_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= DPrimeTilde)) || ((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde))) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int32_t)0);
} else {
if (((((curPosD % strideD) ==  (int32_t)0) && ((curPosH % strideH) ==  (int32_t)0)) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputD = (curPosD / strideD);

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = Arr5DIdxRowM(inputArr,N,DPrime,HPrime,WPrime,CI,n,idxInputD,idxInputH,idxInputW,ci);
} else {
val = funcSSCons( (int32_t)0);
}
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

leftTopCornerD = (leftTopCornerD +  (int32_t)1);
}

}
}

void ConvTranspose3D(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t reshapedIPCols = (((N * D) * H) * W);

uint32_t* filterReshaped = make_array<uint32_t>(reshapedFilterRows, reshapedFilterCols);

uint32_t* inputReshaped = make_array<uint32_t>(reshapedIPRows, reshapedIPCols);

uint32_t* matmulOP = make_array<uint32_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose3DReshapeInput(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t d =  (int32_t)0; d < outD; d++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

uint32_t val = funcSSCons( (int32_t)0);
for (uint32_t fd = d; fd < (d + FD); fd++){
for (uint32_t fh = h; fh < (h + FH); fh++){
for (uint32_t fw = w; fw < (w + FW); fw++){

int32_t curPosD = ((fd - zPadDLeft) / strideD);

int32_t curPosH = ((fh - zPadHLeft) / strideD);

int32_t curPosW = ((fw - zPadWLeft) / strideD);
if ((((((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W)) && (((fd - zPadDLeft) % strideD) ==  (int32_t)0)) && (((fh - zPadHLeft) % strideH) ==  (int32_t)0)) && (((fw - zPadWLeft) % strideW) ==  (int32_t)0))) {

int32_t curFilterPosD = (((FD + d) - fd) -  (int32_t)1);

int32_t curFilterPosH = (((FH + h) - fh) -  (int32_t)1);

int32_t curFilterPosW = (((FW + w) - fw) -  (int32_t)1);
val = SecretAdd(val, SecretMult(Arr5DIdxRowM(inputArr,N,D,H,W,CI,n,curPosD,curPosH,curPosW,ci), Arr5DIdxRowM(filterArr,FD,FH,FW,CO,CI,curFilterPosD,curFilterPosH,curFilterPosW,co,ci)));
}
}
}
}
Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co) = SecretAdd(Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co), val);
}
}
}
}
}
}
}

void ConvTranspose3DLoop(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint32_t* inputArr, uint32_t* filterArr, uint32_t* outArr){
ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, D, H, W, inputArr, filterArr, outArr);
}

void Transpose2(int32_t s1, int32_t s2, uint32_t* inArr, uint32_t* outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(outArr,s1,s2,i,j) = Arr2DIdxRowM(inArr,s2,s1,j,i);
}
}
}

void Pad442(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, uint32_t* inpArr, int32_t pads1, int32_t pads2, int32_t* paddings, uint32_t* outArr){

int32_t lbounds1 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0);

int32_t rbounds1excl = (s1 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)1));

int32_t lbounds2 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0);

int32_t rbounds2excl = (s2 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)1));

int32_t lbounds3 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0);

int32_t rbounds3excl = (s3 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)1));

int32_t lbounds4 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0);

int32_t rbounds4excl = (s4 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)1));
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i,j,k,l) = Arr4DIdxRowM(inpArr,inps1,inps2,inps3,inps4,(i - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0)),(j - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0)),(k - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0)),(l - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0)));
} else {
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i,j,k,l) = funcSSCons( (int32_t)0);
}
}
}
}
}
}

void Pad552(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, uint32_t* inpArr, int32_t pads1, int32_t pads2, int32_t* paddings, uint32_t* outArr){

int32_t lbounds1 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0);

int32_t rbounds1excl = (s1 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)1));

int32_t lbounds2 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0);

int32_t rbounds2excl = (s2 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)1));

int32_t lbounds3 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0);

int32_t rbounds3excl = (s3 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)1));

int32_t lbounds4 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0);

int32_t rbounds4excl = (s4 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)1));

int32_t lbounds5 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)4, (int32_t)0);

int32_t rbounds5excl = (s5 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)4, (int32_t)1));
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
if (((((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl)) && (m >= lbounds5)) && (m < rbounds5excl))) {
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i,j,k,l,m) = Arr5DIdxRowM(inpArr,inps1,inps2,inps3,inps4,inps5,(i - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0)),(j - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0)),(k - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0)),(l - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0)),(m - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)4, (int32_t)0)));
} else {
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i,j,k,l,m) = funcSSCons( (int32_t)0);
}
}
}
}
}
}
}

void PadONNX441(int32_t o1, int32_t o2, int32_t o3, int32_t o4, int32_t i1, int32_t i2, int32_t i3, int32_t i4, uint32_t* inpArr, int32_t pads, int32_t* paddings, uint32_t* outArr){

int32_t lbounds1 = Arr1DIdxRowM(paddings,pads, (int32_t)0);

int32_t rbounds1excl = (o1 - Arr1DIdxRowM(paddings,pads, (int32_t)4));

int32_t lbounds2 = Arr1DIdxRowM(paddings,pads, (int32_t)1);

int32_t rbounds2excl = (o2 - Arr1DIdxRowM(paddings,pads, (int32_t)5));

int32_t lbounds3 = Arr1DIdxRowM(paddings,pads, (int32_t)2);

int32_t rbounds3excl = (o3 - Arr1DIdxRowM(paddings,pads, (int32_t)6));

int32_t lbounds4 = Arr1DIdxRowM(paddings,pads, (int32_t)3);

int32_t rbounds4excl = (o4 - Arr1DIdxRowM(paddings,pads, (int32_t)7));
for (uint32_t i =  (int32_t)0; i < o1; i++){
for (uint32_t j =  (int32_t)0; j < o2; j++){
for (uint32_t k =  (int32_t)0; k < o3; k++){
for (uint32_t l =  (int32_t)0; l < o4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
Arr4DIdxRowM(outArr,o1,o2,o3,o4,i,j,k,l) = Arr4DIdxRowM(inpArr,i1,i2,i3,i4,(i - Arr1DIdxRowM(paddings,pads, (int32_t)0)),(j - Arr1DIdxRowM(paddings,pads, (int32_t)1)),(k - Arr1DIdxRowM(paddings,pads, (int32_t)2)),(l - Arr1DIdxRowM(paddings,pads, (int32_t)3)));
} else {
Arr4DIdxRowM(outArr,o1,o2,o3,o4,i,j,k,l) = funcSSCons( (int32_t)0);
}
}
}
}
}
}

void Squeeze24(int32_t s1, int32_t s2, int32_t dim1, int32_t dim2, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, uint32_t* inArr, uint32_t* outArr){
for (uint32_t i =  (int32_t)0; i < ins1; i++){
for (uint32_t j =  (int32_t)0; j < ins2; j++){
for (uint32_t k =  (int32_t)0; k < ins3; k++){
for (uint32_t l =  (int32_t)0; l < ins4; l++){

int32_t linIdx = ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) + (k * ins4)) + l);

int32_t outIdx1 = (linIdx / s2);

int32_t outIdx2 = (linIdx % s2);
Arr2DIdxRowM(outArr,s1,s2,outIdx1,outIdx2) = Arr4DIdxRowM(inArr,ins1,ins2,ins3,ins4,i,j,k,l);
}
}
}
}
}

void FusedBatchNorm4411(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint32_t* inArr, uint32_t* multArr, uint32_t* biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, uint32_t* outputArr){

int32_t inpSize = (((s1 * s2) * s3) * s4);

uint32_t* inArrReshaped = make_array<uint32_t>(inpSize);

uint32_t* multArrReshaped = make_array<uint32_t>(inpSize);

uint32_t* multExprAns = make_array<uint32_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(inArrReshaped,inpSize,linIdx) = Arr4DIdxRowM(inArr,s1,s2,s3,s4,i1,i2,i3,i4);
Arr1DIdxRowM(multArrReshaped,inpSize,linIdx) = Arr1DIdxRowM(multArr,s4,i4);
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

uint32_t* biasArrScaledUp = make_array<uint32_t>(s4);
for (uint32_t ii =  (int32_t)0; ii < s4; ii++){
Arr1DIdxRowM(biasArrScaledUp,s4,ii) = Arr1DIdxRowM(biasArr,s4,ii);
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(outputArr,s1,s2,s3,s4,i1,i2,i3,i4) = SecretAdd(Arr1DIdxRowM(multExprAns,inpSize,linIdx), Arr1DIdxRowM(biasArrScaledUp,s4,i4));
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s4, biasArrScaledUp);
}

void FusedBatchNorm5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint32_t* inArr, uint32_t* multArr, uint32_t* biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, uint32_t* outputArr){

int32_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

uint32_t* inArrReshaped = make_array<uint32_t>(inpSize);

uint32_t* multArrReshaped = make_array<uint32_t>(inpSize);

uint32_t* multExprAns = make_array<uint32_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(inArrReshaped,inpSize,linIdx) = Arr5DIdxRowM(inArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
Arr1DIdxRowM(multArrReshaped,inpSize,linIdx) = Arr1DIdxRowM(multArr,s5,i5);
}
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

uint32_t* biasArrScaledUp = make_array<uint32_t>(s5);
for (uint32_t ii =  (int32_t)0; ii < s5; ii++){
Arr1DIdxRowM(biasArrScaledUp,s5,ii) = Arr1DIdxRowM(biasArr,s5,ii);
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(outputArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = SecretAdd(Arr1DIdxRowM(multExprAns,inpSize,linIdx), Arr1DIdxRowM(biasArrScaledUp,s5,i5));
}
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s5, biasArrScaledUp);
}

void ElemWiseMul2(int32_t s1, int32_t s2, uint32_t* arr1, uint32_t* arr2, uint32_t* outArr){

int32_t inpSize = (s1 * s2);

uint32_t* arr1Reshaped = make_array<uint32_t>(inpSize);

uint32_t* arr2Reshaped = make_array<uint32_t>(inpSize);

uint32_t* outArrReshaped = make_array<uint32_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(arr1Reshaped,inpSize,linIdx) = Arr2DIdxRowM(arr1,s1,s2,i1,i2);
Arr1DIdxRowM(arr2Reshaped,inpSize,linIdx) = Arr2DIdxRowM(arr2,s1,s2,i1,i2);
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = Arr1DIdxRowM(outArrReshaped,inpSize,linIdx);
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint32_t* arr1, uint32_t* arr2, uint32_t* outArr){

int32_t inpSize = (((s1 * s2) * s3) * s4);

uint32_t* arr1Reshaped = make_array<uint32_t>(inpSize);

uint32_t* arr2Reshaped = make_array<uint32_t>(inpSize);

uint32_t* outArrReshaped = make_array<uint32_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(arr1Reshaped,inpSize,linIdx) = Arr4DIdxRowM(arr1,s1,s2,s3,s4,i1,i2,i3,i4);
Arr1DIdxRowM(arr2Reshaped,inpSize,linIdx) = Arr4DIdxRowM(arr2,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(outArrReshaped,inpSize,linIdx);
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint32_t* arr1, uint32_t* arr2, uint32_t* outArr){

int32_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

uint32_t* arr1Reshaped = make_array<uint32_t>(inpSize);

uint32_t* arr2Reshaped = make_array<uint32_t>(inpSize);

uint32_t* outArrReshaped = make_array<uint32_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(arr1Reshaped,inpSize,linIdx) = Arr5DIdxRowM(arr1,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
Arr1DIdxRowM(arr2Reshaped,inpSize,linIdx) = Arr5DIdxRowM(arr2,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
}
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = Arr1DIdxRowM(outArrReshaped,inpSize,linIdx);
}
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ReduceMean24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, uint32_t* inputArr, int32_t* axes, uint32_t* outputArr){

int32_t divisor = (inS2 * inS3);

int32_t outputSize = (outS1 * outS2);

uint32_t* sumArr = make_array<uint32_t>(outputSize);

uint32_t* outputArrReshaped = make_array<uint32_t>(outputSize);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint32_t summ = funcSSCons( (int32_t)0);
for (uint32_t i =  (int32_t)0; i < inS2; i++){
for (uint32_t j =  (int32_t)0; j < inS3; j++){
summ = SecretAdd(summ, Arr4DIdxRowM(inputArr,inS1,inS2,inS3,inS4,i1,i,j,i2));
}
}
Arr1DIdxRowM(sumArr,outputSize,((i1 * outS2) + i2)) = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){
Arr2DIdxRowM(outputArr,outS1,outS2,i1,i2) = Arr1DIdxRowM(outputArrReshaped,outputSize,((i1 * outS2) + i2));
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ReduceMeanONNX24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, uint32_t* inputArr, int32_t axis1, int32_t axis2, uint32_t* outputArr){

int32_t divisor = (inS3 * inS4);

int32_t outputSize = (outS1 * outS2);

uint32_t* sumArr = make_array<uint32_t>(outputSize);

uint32_t* outputArrReshaped = make_array<uint32_t>(outputSize);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint32_t summ = funcSSCons( (int32_t)0);
for (uint32_t i =  (int32_t)0; i < inS3; i++){
for (uint32_t j =  (int32_t)0; j < inS4; j++){
summ = SecretAdd(summ, Arr4DIdxRowM(inputArr,inS1,inS2,inS3,inS4,i1,i2,i,j));
}
}
Arr1DIdxRowM(sumArr,outputSize,((i1 * outS2) + i2)) = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){
Arr2DIdxRowM(outputArr,outS1,outS2,i1,i2) = Arr1DIdxRowM(outputArrReshaped,outputSize,((i1 * outS2) + i2));
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ArgMax1(int32_t outArrS1, int32_t inArrS1, int32_t inArrS2, uint32_t* inArr, int32_t dim, uint32_t* outArr){
ArgMax(inArrS1, inArrS2, inArr, outArr);
}

void ArgMax3(int32_t outs1, int32_t outs2, int32_t outs3, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, uint32_t* inArr, int32_t dim, uint32_t* outArr){

int32_t size = ((ins1 * ins2) * ins3);

uint32_t* reshapedInArr = make_array<uint32_t>(size, ins4);

uint32_t* reshapedOutArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < ins3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < ins4; i4++){

int32_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
Arr2DIdxRowM(reshapedInArr,size,ins4,linIdx,i4) = Arr4DIdxRowM(inArr,ins1,ins2,ins3,ins4,i1,i2,i3,i4);
}
}
}
}
ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
for (uint32_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < ins3; i3++){

int32_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
Arr3DIdxRowM(outArr,outs1,outs2,outs3,i1,i2,i3) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
ClearMemSecret2(size, ins4, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu2(int32_t s1, int32_t s2, uint32_t* inArr, uint32_t* outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (s1 * s2);

uint32_t* reshapedInArr = make_array<uint32_t>(size);

uint32_t* reshapedOutArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr2DIdxRowM(inArr,s1,s2,i1,i2);
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint32_t* inArr, uint32_t* outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (((s1 * s2) * s3) * s4);

uint32_t* reshapedInArr = make_array<uint32_t>(size);

uint32_t* reshapedOutArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr4DIdxRowM(inArr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint32_t* inArr, uint32_t* outArr, int32_t sf, uint32_t doTruncation){

int32_t size = ((((s1 * s2) * s3) * s4) * s5);

uint32_t* reshapedInArr = make_array<uint32_t>(size);

uint32_t* reshapedOutArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr5DIdxRowM(inArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
}
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Floor2(int32_t s1, int32_t s2, uint32_t* inArr, uint32_t* outArr, int32_t sf){

int32_t size = (s1 * s2);

uint32_t* reshapedInArr = make_array<uint32_t>(size);

uint32_t* reshapedOutArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr2DIdxRowM(inArr,s1,s2,i1,i2);
}
}
Floor(size, reshapedInArr, reshapedOutArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void ScaleUp1(int32_t s1, uint32_t* arr, int32_t sf){
ScaleUp(s1, arr, sf);
}

void ScaleUp2(int32_t s1, int32_t s2, uint32_t* arr, int32_t sf){

int32_t size = (s1 * s2);

uint32_t* reshapedArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr2DIdxRowM(arr,s1,s2,i1,i2);
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(arr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp3(int32_t s1, int32_t s2, int32_t s3, uint32_t* arr, int32_t sf){

int32_t size = ((s1 * s2) * s3);

uint32_t* reshapedArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3);
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint32_t* arr, int32_t sf){

int32_t size = (((s1 * s2) * s3) * s4);

uint32_t* reshapedArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown1(int32_t s1, uint32_t* arr, int32_t sf){
ScaleDown(s1, arr, sf);
}

void ScaleDown2(int32_t s1, int32_t s2, uint32_t* arr, int32_t sf){

int32_t size = (s1 * s2);

uint32_t* reshapedArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr2DIdxRowM(arr,s1,s2,i1,i2);
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(arr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown3(int32_t s1, int32_t s2, int32_t s3, uint32_t* arr, int32_t sf){

int32_t size = ((s1 * s2) * s3);

uint32_t* reshapedArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3);
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint32_t* arr, int32_t sf){

int32_t size = (((s1 * s2) * s3) * s4);

uint32_t* reshapedArr = make_array<uint32_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}


int main(int argc, char** argv)
{
ArgMapping amap;
int port = 32000;
string serverAddr = "127.0.0.1";

amap.arg("r", party, "Role of party: ALICE/SERVER = 1; BOB/CLIENT = 2");
amap.arg("p", port, "Port Number");
amap.arg("ip", serverAddr, "IP Address of server (ALICE)");
amap.parse(argc, argv);

assert(party==sci::ALICE || party==sci::BOB);

checkIfUsingEigen();
for(int i=0;i<numThreads;i++){
ioArr[i] = new sci::NetIO(party==sci::ALICE ? nullptr : serverAddr.c_str(), port+i);
otInstanceArr[i] = new sci::IKNP<sci::NetIO>(ioArr[i]);
prgInstanceArr[i] = new sci::PRG128();
kkotInstanceArr[i] = new sci::KKOT < sci::NetIO > (ioArr[i]);
matmulInstanceArr[i] = new Matmul<sci::NetIO, intType, sci::IKNP<sci::NetIO>>(party, bitlength, ioArr[i], otInstanceArr[i], nullptr);
if (i == 0) {
otpackArr[i] = new sci::OTPack<sci::NetIO>(ioArr[i], party, baseForRelu, bitlength);
} 
else if (i == 1) {
otpackArr[i] = new sci::OTPack<sci::NetIO>(ioArr[i], 3-party, baseForRelu, bitlength);
} 
else if (i & 1) {
otpackArr[i] = new sci::OTPack<sci::NetIO>(ioArr[i], 3-party, baseForRelu, bitlength, false);
otpackArr[i]->copy(otpackArr[1]);
} 
else {
otpackArr[i] = new sci::OTPack<sci::NetIO>(ioArr[i], party, baseForRelu, bitlength, false);
otpackArr[i]->copy(otpackArr[0]);
}
}

io = ioArr[0];
iknpOT = new sci::IKNP<sci::NetIO>(io);
iknpOTRoleReversed = new sci::IKNP<sci::NetIO>(io); //TCP is full duplex -- so both side OT on same TCP should be good
kkot = new sci::KKOT<sci::NetIO>(io);
prg128Instance = new sci::PRG128();
otpack = new sci::OTPack<sci::NetIO>(io, party, baseForRelu, bitlength);

matmulImpl = new Matmul<sci::NetIO, intType, sci::IKNP<sci::NetIO>>(party, bitlength, io, iknpOT, iknpOTRoleReversed);


#ifdef SCI_OT
reluImpl = new ReLURingProtocol<sci::NetIO, intType>(party,RING,io,bitlength,baseForRelu,otpack);
maxpoolImpl = new MaxPoolProtocol<sci::NetIO, intType>(party,RING,io,bitlength,baseForRelu,0,otpack,reluImpl);
argmaxImpl = new ArgMaxProtocol<sci::NetIO, intType>(party,RING,io,bitlength,baseForRelu,0,otpack,reluImpl);
#endif

#ifdef SCI_HE
reluImpl = new ReLUFieldProtocol<sci::NetIO, intType>(party,FIELD,io,bitlength,baseForRelu,prime_mod,otpack);
maxpoolImpl = new MaxPoolProtocol<sci::NetIO, intType>(party,FIELD,io,bitlength,baseForRelu,prime_mod,otpack,reluImpl);
argmaxImpl = new ArgMaxProtocol<sci::NetIO, intType>(party,FIELD,io,bitlength,baseForRelu,prime_mod,otpack,reluImpl);
heConvImpl = new ConvField(party,io);
heFCImpl = new FCField(party,io);
heProdImpl = new ElemWiseProdField(party, io);
assertFieldRun();
#endif
#ifdef MULTITHREADED_NONLIN
#ifdef SCI_OT
for(int i = 0; i < numThreads; i++) {
if (i & 1) {
reluImplArr[i] = new ReLURingProtocol<sci::NetIO, intType>(3-party,RING,ioArr[i],bitlength,baseForRelu,otpackArr[i]);
maxpoolImplArr[i] = new MaxPoolProtocol<sci::NetIO, intType>(3-party,RING,ioArr[i],bitlength,baseForRelu,0,otpackArr[i],reluImplArr[i]);
} 
else {
reluImplArr[i] = new ReLURingProtocol<sci::NetIO, intType>(party,RING,ioArr[i],bitlength,baseForRelu,otpackArr[i]);
maxpoolImplArr[i] = new MaxPoolProtocol<sci::NetIO, intType>(party,RING,ioArr[i],bitlength,baseForRelu,0,otpackArr[i],reluImplArr[i]);
}
}
#endif
#ifdef SCI_HE
for(int i = 0; i < numThreads; i++) {
if (i & 1) {
reluImplArr[i] = new ReLUFieldProtocol<sci::NetIO, intType>(3-party,FIELD,ioArr[i],bitlength,baseForRelu,prime_mod,otpackArr[i]);
maxpoolImplArr[i] = new MaxPoolProtocol<sci::NetIO, intType>(3-party,FIELD,ioArr[i],bitlength,baseForRelu,prime_mod,otpackArr[i],reluImplArr[i]);
} 
else {
reluImplArr[i] = new ReLUFieldProtocol<sci::NetIO, intType>(party,FIELD,ioArr[i],bitlength,baseForRelu,prime_mod,otpackArr[i]);
maxpoolImplArr[i] = new MaxPoolProtocol<sci::NetIO, intType>(party,FIELD,ioArr[i],bitlength,baseForRelu,prime_mod,otpackArr[i],reluImplArr[i]);
}
}
#endif
#endif

if (party==sci::ALICE){
iknpOT->setup_send();
iknpOTRoleReversed->setup_recv();
}
else if (party==sci::BOB){
iknpOT->setup_recv();
iknpOTRoleReversed->setup_send();
}
cout<<"After base ots, communication = "<<(io->counter)<<" bytes"<<endl;


uint32_t* tmp0 = make_array<uint32_t>( (int32_t)1,  (int32_t)227,  (int32_t)227,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp0 at (1930,1-1930,46) */
uint32_t __tmp_in_tmp0;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)227; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)227; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((party == CLIENT)) {
cin >> __tmp_in_tmp0;
}
Arr4DIdxRowM(tmp0, (int32_t)1, (int32_t)227, (int32_t)227, (int32_t)3,i0,i1,i2,i3) = (party == CLIENT) ? __tmp_in_tmp0 : 0;
}
}
}
}

uint32_t* tmp1 = make_array<uint32_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp1 at (1933,1-1933,43) */
uint32_t __tmp_in_tmp1;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp1;
}
Arr4DIdxRowM(tmp1, (int32_t)3, (int32_t)3, (int32_t)3, (int32_t)64,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp1 : 0;
}
}
}
}

uint32_t* tmp2 = make_array<uint32_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp2 at (1936,1-1936,34) */
uint32_t __tmp_in_tmp2;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp2;
}
Arr1DIdxRowM(tmp2, (int32_t)64,i0) = (party == SERVER) ? __tmp_in_tmp2 : 0;
}

uint32_t* tmp3 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)16);
/* Variable to read the clear value corresponding to the input variable tmp3 at (1939,1-1939,44) */
uint32_t __tmp_in_tmp3;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)16; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp3;
}
Arr4DIdxRowM(tmp3, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)16,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp3 : 0;
}
}
}
}

uint32_t* tmp4 = make_array<uint32_t>( (int32_t)16);
/* Variable to read the clear value corresponding to the input variable tmp4 at (1942,1-1942,34) */
uint32_t __tmp_in_tmp4;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)16; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp4;
}
Arr1DIdxRowM(tmp4, (int32_t)16,i0) = (party == SERVER) ? __tmp_in_tmp4 : 0;
}

uint32_t* tmp5 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)16,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp5 at (1945,1-1945,44) */
uint32_t __tmp_in_tmp5;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)16; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp5;
}
Arr4DIdxRowM(tmp5, (int32_t)1, (int32_t)1, (int32_t)16, (int32_t)64,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp5 : 0;
}
}
}
}

uint32_t* tmp6 = make_array<uint32_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp6 at (1948,1-1948,34) */
uint32_t __tmp_in_tmp6;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp6;
}
Arr1DIdxRowM(tmp6, (int32_t)64,i0) = (party == SERVER) ? __tmp_in_tmp6 : 0;
}

uint32_t* tmp7 = make_array<uint32_t>( (int32_t)3,  (int32_t)3,  (int32_t)16,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp7 at (1951,1-1951,44) */
uint32_t __tmp_in_tmp7;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)16; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp7;
}
Arr4DIdxRowM(tmp7, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)64,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp7 : 0;
}
}
}
}

uint32_t* tmp8 = make_array<uint32_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp8 at (1954,1-1954,34) */
uint32_t __tmp_in_tmp8;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp8;
}
Arr1DIdxRowM(tmp8, (int32_t)64,i0) = (party == SERVER) ? __tmp_in_tmp8 : 0;
}

uint32_t* tmp9 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16);
/* Variable to read the clear value corresponding to the input variable tmp9 at (1957,1-1957,45) */
uint32_t __tmp_in_tmp9;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)16; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp9;
}
Arr4DIdxRowM(tmp9, (int32_t)1, (int32_t)1, (int32_t)128, (int32_t)16,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp9 : 0;
}
}
}
}

uint32_t* tmp10 = make_array<uint32_t>( (int32_t)16);
/* Variable to read the clear value corresponding to the input variable tmp10 at (1960,1-1960,35) */
uint32_t __tmp_in_tmp10;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)16; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp10;
}
Arr1DIdxRowM(tmp10, (int32_t)16,i0) = (party == SERVER) ? __tmp_in_tmp10 : 0;
}

uint32_t* tmp11 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)16,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp11 at (1963,1-1963,45) */
uint32_t __tmp_in_tmp11;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)16; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp11;
}
Arr4DIdxRowM(tmp11, (int32_t)1, (int32_t)1, (int32_t)16, (int32_t)64,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp11 : 0;
}
}
}
}

uint32_t* tmp12 = make_array<uint32_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp12 at (1966,1-1966,35) */
uint32_t __tmp_in_tmp12;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp12;
}
Arr1DIdxRowM(tmp12, (int32_t)64,i0) = (party == SERVER) ? __tmp_in_tmp12 : 0;
}

uint32_t* tmp13 = make_array<uint32_t>( (int32_t)3,  (int32_t)3,  (int32_t)16,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp13 at (1969,1-1969,45) */
uint32_t __tmp_in_tmp13;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)16; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp13;
}
Arr4DIdxRowM(tmp13, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)64,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp13 : 0;
}
}
}
}

uint32_t* tmp14 = make_array<uint32_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp14 at (1972,1-1972,35) */
uint32_t __tmp_in_tmp14;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp14;
}
Arr1DIdxRowM(tmp14, (int32_t)64,i0) = (party == SERVER) ? __tmp_in_tmp14 : 0;
}

uint32_t* tmp15 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp15 at (1975,1-1975,46) */
uint32_t __tmp_in_tmp15;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp15;
}
Arr4DIdxRowM(tmp15, (int32_t)1, (int32_t)1, (int32_t)128, (int32_t)32,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp15 : 0;
}
}
}
}

uint32_t* tmp16 = make_array<uint32_t>( (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp16 at (1978,1-1978,35) */
uint32_t __tmp_in_tmp16;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)32; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp16;
}
Arr1DIdxRowM(tmp16, (int32_t)32,i0) = (party == SERVER) ? __tmp_in_tmp16 : 0;
}

uint32_t* tmp17 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp17 at (1981,1-1981,46) */
uint32_t __tmp_in_tmp17;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)32; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp17;
}
Arr4DIdxRowM(tmp17, (int32_t)1, (int32_t)1, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp17 : 0;
}
}
}
}

uint32_t* tmp18 = make_array<uint32_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp18 at (1984,1-1984,36) */
uint32_t __tmp_in_tmp18;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp18;
}
Arr1DIdxRowM(tmp18, (int32_t)128,i0) = (party == SERVER) ? __tmp_in_tmp18 : 0;
}

uint32_t* tmp19 = make_array<uint32_t>( (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp19 at (1987,1-1987,46) */
uint32_t __tmp_in_tmp19;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)32; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp19;
}
Arr4DIdxRowM(tmp19, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp19 : 0;
}
}
}
}

uint32_t* tmp20 = make_array<uint32_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp20 at (1990,1-1990,36) */
uint32_t __tmp_in_tmp20;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp20;
}
Arr1DIdxRowM(tmp20, (int32_t)128,i0) = (party == SERVER) ? __tmp_in_tmp20 : 0;
}

uint32_t* tmp21 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp21 at (1993,1-1993,46) */
uint32_t __tmp_in_tmp21;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp21;
}
Arr4DIdxRowM(tmp21, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)32,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp21 : 0;
}
}
}
}

uint32_t* tmp22 = make_array<uint32_t>( (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp22 at (1996,1-1996,35) */
uint32_t __tmp_in_tmp22;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)32; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp22;
}
Arr1DIdxRowM(tmp22, (int32_t)32,i0) = (party == SERVER) ? __tmp_in_tmp22 : 0;
}

uint32_t* tmp23 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp23 at (1999,1-1999,46) */
uint32_t __tmp_in_tmp23;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)32; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp23;
}
Arr4DIdxRowM(tmp23, (int32_t)1, (int32_t)1, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp23 : 0;
}
}
}
}

uint32_t* tmp24 = make_array<uint32_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp24 at (2002,1-2002,36) */
uint32_t __tmp_in_tmp24;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp24;
}
Arr1DIdxRowM(tmp24, (int32_t)128,i0) = (party == SERVER) ? __tmp_in_tmp24 : 0;
}

uint32_t* tmp25 = make_array<uint32_t>( (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp25 at (2005,1-2005,46) */
uint32_t __tmp_in_tmp25;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)32; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp25;
}
Arr4DIdxRowM(tmp25, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)128,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp25 : 0;
}
}
}
}

uint32_t* tmp26 = make_array<uint32_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp26 at (2008,1-2008,36) */
uint32_t __tmp_in_tmp26;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp26;
}
Arr1DIdxRowM(tmp26, (int32_t)128,i0) = (party == SERVER) ? __tmp_in_tmp26 : 0;
}

uint32_t* tmp27 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)48);
/* Variable to read the clear value corresponding to the input variable tmp27 at (2011,1-2011,46) */
uint32_t __tmp_in_tmp27;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)48; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp27;
}
Arr4DIdxRowM(tmp27, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)48,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp27 : 0;
}
}
}
}

uint32_t* tmp28 = make_array<uint32_t>( (int32_t)48);
/* Variable to read the clear value corresponding to the input variable tmp28 at (2014,1-2014,35) */
uint32_t __tmp_in_tmp28;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)48; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp28;
}
Arr1DIdxRowM(tmp28, (int32_t)48,i0) = (party == SERVER) ? __tmp_in_tmp28 : 0;
}

uint32_t* tmp29 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)48,  (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp29 at (2017,1-2017,46) */
uint32_t __tmp_in_tmp29;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)48; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)192; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp29;
}
Arr4DIdxRowM(tmp29, (int32_t)1, (int32_t)1, (int32_t)48, (int32_t)192,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp29 : 0;
}
}
}
}

uint32_t* tmp30 = make_array<uint32_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp30 at (2020,1-2020,36) */
uint32_t __tmp_in_tmp30;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp30;
}
Arr1DIdxRowM(tmp30, (int32_t)192,i0) = (party == SERVER) ? __tmp_in_tmp30 : 0;
}

uint32_t* tmp31 = make_array<uint32_t>( (int32_t)3,  (int32_t)3,  (int32_t)48,  (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp31 at (2023,1-2023,46) */
uint32_t __tmp_in_tmp31;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)48; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)192; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp31;
}
Arr4DIdxRowM(tmp31, (int32_t)3, (int32_t)3, (int32_t)48, (int32_t)192,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp31 : 0;
}
}
}
}

uint32_t* tmp32 = make_array<uint32_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp32 at (2026,1-2026,36) */
uint32_t __tmp_in_tmp32;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp32;
}
Arr1DIdxRowM(tmp32, (int32_t)192,i0) = (party == SERVER) ? __tmp_in_tmp32 : 0;
}

uint32_t* tmp33 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)48);
/* Variable to read the clear value corresponding to the input variable tmp33 at (2029,1-2029,46) */
uint32_t __tmp_in_tmp33;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)384; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)48; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp33;
}
Arr4DIdxRowM(tmp33, (int32_t)1, (int32_t)1, (int32_t)384, (int32_t)48,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp33 : 0;
}
}
}
}

uint32_t* tmp34 = make_array<uint32_t>( (int32_t)48);
/* Variable to read the clear value corresponding to the input variable tmp34 at (2032,1-2032,35) */
uint32_t __tmp_in_tmp34;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)48; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp34;
}
Arr1DIdxRowM(tmp34, (int32_t)48,i0) = (party == SERVER) ? __tmp_in_tmp34 : 0;
}

uint32_t* tmp35 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)48,  (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp35 at (2035,1-2035,46) */
uint32_t __tmp_in_tmp35;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)48; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)192; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp35;
}
Arr4DIdxRowM(tmp35, (int32_t)1, (int32_t)1, (int32_t)48, (int32_t)192,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp35 : 0;
}
}
}
}

uint32_t* tmp36 = make_array<uint32_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp36 at (2038,1-2038,36) */
uint32_t __tmp_in_tmp36;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp36;
}
Arr1DIdxRowM(tmp36, (int32_t)192,i0) = (party == SERVER) ? __tmp_in_tmp36 : 0;
}

uint32_t* tmp37 = make_array<uint32_t>( (int32_t)3,  (int32_t)3,  (int32_t)48,  (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp37 at (2041,1-2041,46) */
uint32_t __tmp_in_tmp37;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)48; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)192; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp37;
}
Arr4DIdxRowM(tmp37, (int32_t)3, (int32_t)3, (int32_t)48, (int32_t)192,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp37 : 0;
}
}
}
}

uint32_t* tmp38 = make_array<uint32_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp38 at (2044,1-2044,36) */
uint32_t __tmp_in_tmp38;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp38;
}
Arr1DIdxRowM(tmp38, (int32_t)192,i0) = (party == SERVER) ? __tmp_in_tmp38 : 0;
}

uint32_t* tmp39 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp39 at (2047,1-2047,46) */
uint32_t __tmp_in_tmp39;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)384; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp39;
}
Arr4DIdxRowM(tmp39, (int32_t)1, (int32_t)1, (int32_t)384, (int32_t)64,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp39 : 0;
}
}
}
}

uint32_t* tmp40 = make_array<uint32_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp40 at (2050,1-2050,35) */
uint32_t __tmp_in_tmp40;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp40;
}
Arr1DIdxRowM(tmp40, (int32_t)64,i0) = (party == SERVER) ? __tmp_in_tmp40 : 0;
}

uint32_t* tmp41 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp41 at (2053,1-2053,46) */
uint32_t __tmp_in_tmp41;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp41;
}
Arr4DIdxRowM(tmp41, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp41 : 0;
}
}
}
}

uint32_t* tmp42 = make_array<uint32_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp42 at (2056,1-2056,36) */
uint32_t __tmp_in_tmp42;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp42;
}
Arr1DIdxRowM(tmp42, (int32_t)256,i0) = (party == SERVER) ? __tmp_in_tmp42 : 0;
}

uint32_t* tmp43 = make_array<uint32_t>( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp43 at (2059,1-2059,46) */
uint32_t __tmp_in_tmp43;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp43;
}
Arr4DIdxRowM(tmp43, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp43 : 0;
}
}
}
}

uint32_t* tmp44 = make_array<uint32_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp44 at (2062,1-2062,36) */
uint32_t __tmp_in_tmp44;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp44;
}
Arr1DIdxRowM(tmp44, (int32_t)256,i0) = (party == SERVER) ? __tmp_in_tmp44 : 0;
}

uint32_t* tmp45 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp45 at (2065,1-2065,46) */
uint32_t __tmp_in_tmp45;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp45;
}
Arr4DIdxRowM(tmp45, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)64,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp45 : 0;
}
}
}
}

uint32_t* tmp46 = make_array<uint32_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp46 at (2068,1-2068,35) */
uint32_t __tmp_in_tmp46;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp46;
}
Arr1DIdxRowM(tmp46, (int32_t)64,i0) = (party == SERVER) ? __tmp_in_tmp46 : 0;
}

uint32_t* tmp47 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp47 at (2071,1-2071,46) */
uint32_t __tmp_in_tmp47;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp47;
}
Arr4DIdxRowM(tmp47, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp47 : 0;
}
}
}
}

uint32_t* tmp48 = make_array<uint32_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp48 at (2074,1-2074,36) */
uint32_t __tmp_in_tmp48;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp48;
}
Arr1DIdxRowM(tmp48, (int32_t)256,i0) = (party == SERVER) ? __tmp_in_tmp48 : 0;
}

uint32_t* tmp49 = make_array<uint32_t>( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp49 at (2077,1-2077,46) */
uint32_t __tmp_in_tmp49;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp49;
}
Arr4DIdxRowM(tmp49, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)256,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp49 : 0;
}
}
}
}

uint32_t* tmp50 = make_array<uint32_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp50 at (2080,1-2080,36) */
uint32_t __tmp_in_tmp50;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp50;
}
Arr1DIdxRowM(tmp50, (int32_t)256,i0) = (party == SERVER) ? __tmp_in_tmp50 : 0;
}

uint32_t* tmp51 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)1000);
/* Variable to read the clear value corresponding to the input variable tmp51 at (2083,1-2083,48) */
uint32_t __tmp_in_tmp51;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1000; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp51;
}
Arr4DIdxRowM(tmp51, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)1000,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp51 : 0;
}
}
}
}

uint32_t* tmp52 = make_array<uint32_t>( (int32_t)1000);
/* Variable to read the clear value corresponding to the input variable tmp52 at (2086,1-2086,37) */
uint32_t __tmp_in_tmp52;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1000; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp52;
}
Arr1DIdxRowM(tmp52, (int32_t)1000,i0) = (party == SERVER) ? __tmp_in_tmp52 : 0;
}
StartComputation();

uint32_t* tmp53 = make_array<uint32_t>( (int32_t)1,  (int32_t)113,  (int32_t)113,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)227,  (int32_t)227,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp0, tmp1, tmp53);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)64, tmp1);
ClearMemSecret4( (int32_t)1,  (int32_t)227,  (int32_t)227,  (int32_t)3, tmp0);

uint32_t* tmp56 = make_array<uint32_t>( (int32_t)1,  (int32_t)113,  (int32_t)113,  (int32_t)64);
ScaleUp1( (int32_t)64, tmp2,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)113,  (int32_t)113,  (int32_t)64, tmp53, tmp2, tmp56);
ClearMemSecret1( (int32_t)64, tmp2);
ClearMemSecret4( (int32_t)1,  (int32_t)113,  (int32_t)113,  (int32_t)64, tmp53);

uint32_t* tmp59 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
MaxPool( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)113,  (int32_t)113,  (int32_t)64, tmp56, tmp59);
ClearMemSecret4( (int32_t)1,  (int32_t)113,  (int32_t)113,  (int32_t)64, tmp56);

uint32_t* tmp61 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp59, tmp61,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp59);

uint32_t* tmp63 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)16,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp61, tmp3, tmp63);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp61);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)16, tmp3);

uint32_t* tmp66 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16);
ScaleUp1( (int32_t)16, tmp4,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16, tmp63, tmp4, tmp66);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16, tmp63);
ClearMemSecret1( (int32_t)16, tmp4);

uint32_t* tmp69 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16, tmp66, tmp69,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16, tmp66);

uint32_t* tmp71 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp69, tmp5, tmp71);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)16,  (int32_t)64, tmp5);

uint32_t* tmp73 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleUp1( (int32_t)64, tmp6,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp71, tmp6, tmp73);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp71);
ClearMemSecret1( (int32_t)64, tmp6);

uint32_t* tmp76 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp73, tmp76,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp73);

uint32_t* tmp78 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp69, tmp7, tmp78);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)16,  (int32_t)64, tmp7);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16, tmp69);

uint32_t* tmp81 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleUp1( (int32_t)64, tmp8,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp78, tmp8, tmp81);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp78);
ClearMemSecret1( (int32_t)64, tmp8);

uint32_t* tmp84 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp81, tmp84,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp81);

int32_t tmp86 =  (int32_t)3;

uint32_t* tmp87 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp76,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp84, tmp86, tmp87);
ClearMemPublic(tmp86);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp76);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp84);

uint32_t* tmp91 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)16,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp87, tmp9, tmp91);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp87);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)16, tmp9);

uint32_t* tmp94 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16);
ScaleUp1( (int32_t)16, tmp10,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16, tmp91, tmp10, tmp94);
ClearMemSecret1( (int32_t)16, tmp10);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16, tmp91);

uint32_t* tmp97 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16, tmp94, tmp97,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16, tmp94);

uint32_t* tmp99 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp97, tmp11, tmp99);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)16,  (int32_t)64, tmp11);

uint32_t* tmp101 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleUp1( (int32_t)64, tmp12,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp99, tmp12, tmp101);
ClearMemSecret1( (int32_t)64, tmp12);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp99);

uint32_t* tmp104 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp101, tmp104,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp101);

uint32_t* tmp106 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp97, tmp13, tmp106);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)16,  (int32_t)64, tmp13);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)16, tmp97);

uint32_t* tmp109 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleUp1( (int32_t)64, tmp14,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp106, tmp14, tmp109);
ClearMemSecret1( (int32_t)64, tmp14);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp106);

uint32_t* tmp112 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp109, tmp112,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp109);

int32_t tmp114 =  (int32_t)3;

uint32_t* tmp115 = make_array<uint32_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp104,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp112, tmp114, tmp115);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp112);
ClearMemPublic(tmp114);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp104);

uint32_t* tmp119 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
MaxPool( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp115, tmp119);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp115);

uint32_t* tmp121 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp119, tmp15, tmp121);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp119);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)32, tmp15);

uint32_t* tmp124 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32);
ScaleUp1( (int32_t)32, tmp16,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32, tmp121, tmp16, tmp124);
ClearMemSecret1( (int32_t)32, tmp16);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32, tmp121);

uint32_t* tmp127 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32);
Relu4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32, tmp124, tmp127,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32, tmp124);

uint32_t* tmp129 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp127, tmp17, tmp129);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)128, tmp17);

uint32_t* tmp131 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
ScaleUp1( (int32_t)128, tmp18,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp129, tmp18, tmp131);
ClearMemSecret1( (int32_t)128, tmp18);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp129);

uint32_t* tmp134 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp131, tmp134,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp131);

uint32_t* tmp136 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp127, tmp19, tmp136);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)128, tmp19);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32, tmp127);

uint32_t* tmp139 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
ScaleUp1( (int32_t)128, tmp20,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp136, tmp20, tmp139);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp136);
ClearMemSecret1( (int32_t)128, tmp20);

uint32_t* tmp142 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp139, tmp142,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp139);

int32_t tmp144 =  (int32_t)3;

uint32_t* tmp145 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)256);
Concat2T444( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)256,  (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp134,  (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp142, tmp144, tmp145);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp134);
ClearMemPublic(tmp144);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp142);

uint32_t* tmp149 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp145, tmp21, tmp149);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)32, tmp21);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)256, tmp145);

uint32_t* tmp152 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32);
ScaleUp1( (int32_t)32, tmp22,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32, tmp149, tmp22, tmp152);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32, tmp149);
ClearMemSecret1( (int32_t)32, tmp22);

uint32_t* tmp155 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32);
Relu4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32, tmp152, tmp155,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32, tmp152);

uint32_t* tmp157 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp155, tmp23, tmp157);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)128, tmp23);

uint32_t* tmp159 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
ScaleUp1( (int32_t)128, tmp24,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp157, tmp24, tmp159);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp157);
ClearMemSecret1( (int32_t)128, tmp24);

uint32_t* tmp162 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp159, tmp162,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp159);

uint32_t* tmp164 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp155, tmp25, tmp164);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)32, tmp155);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)128, tmp25);

uint32_t* tmp167 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
ScaleUp1( (int32_t)128, tmp26,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp164, tmp26, tmp167);
ClearMemSecret1( (int32_t)128, tmp26);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp164);

uint32_t* tmp170 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp167, tmp170,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp167);

int32_t tmp172 =  (int32_t)3;

uint32_t* tmp173 = make_array<uint32_t>( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)256);
Concat2T444( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)256,  (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp162,  (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp170, tmp172, tmp173);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp170);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)128, tmp162);
ClearMemPublic(tmp172);

uint32_t* tmp177 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
MaxPool( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)256, tmp173, tmp177);
ClearMemSecret4( (int32_t)1,  (int32_t)27,  (int32_t)27,  (int32_t)256, tmp173);

uint32_t* tmp179 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)48,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp177, tmp27, tmp179);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)48, tmp27);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp177);

uint32_t* tmp182 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48);
ScaleUp1( (int32_t)48, tmp28,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48, tmp179, tmp28, tmp182);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48, tmp179);
ClearMemSecret1( (int32_t)48, tmp28);

uint32_t* tmp185 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48, tmp182, tmp185,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48, tmp182);

uint32_t* tmp187 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48,  (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp185, tmp29, tmp187);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)48,  (int32_t)192, tmp29);

uint32_t* tmp189 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
ScaleUp1( (int32_t)192, tmp30,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp187, tmp30, tmp189);
ClearMemSecret1( (int32_t)192, tmp30);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp187);

uint32_t* tmp192 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp189, tmp192,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp189);

uint32_t* tmp194 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48,  (int32_t)3,  (int32_t)3,  (int32_t)192,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp185, tmp31, tmp194);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48, tmp185);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)48,  (int32_t)192, tmp31);

uint32_t* tmp197 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
ScaleUp1( (int32_t)192, tmp32,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp194, tmp32, tmp197);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp194);
ClearMemSecret1( (int32_t)192, tmp32);

uint32_t* tmp200 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp197, tmp200,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp197);

int32_t tmp202 =  (int32_t)3;

uint32_t* tmp203 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)384);
Concat2T444( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)384,  (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp192,  (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp200, tmp202, tmp203);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp200);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp192);
ClearMemPublic(tmp202);

uint32_t* tmp207 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)384,  (int32_t)1,  (int32_t)1,  (int32_t)48,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp203, tmp33, tmp207);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)384, tmp203);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)48, tmp33);

uint32_t* tmp210 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48);
ScaleUp1( (int32_t)48, tmp34,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48, tmp207, tmp34, tmp210);
ClearMemSecret1( (int32_t)48, tmp34);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48, tmp207);

uint32_t* tmp213 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48, tmp210, tmp213,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48, tmp210);

uint32_t* tmp215 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48,  (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp213, tmp35, tmp215);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)48,  (int32_t)192, tmp35);

uint32_t* tmp217 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
ScaleUp1( (int32_t)192, tmp36,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp215, tmp36, tmp217);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp215);
ClearMemSecret1( (int32_t)192, tmp36);

uint32_t* tmp220 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp217, tmp220,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp217);

uint32_t* tmp222 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48,  (int32_t)3,  (int32_t)3,  (int32_t)192,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp213, tmp37, tmp222);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)48, tmp213);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)48,  (int32_t)192, tmp37);

uint32_t* tmp225 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
ScaleUp1( (int32_t)192, tmp38,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp222, tmp38, tmp225);
ClearMemSecret1( (int32_t)192, tmp38);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp222);

uint32_t* tmp228 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp225, tmp228,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp225);

int32_t tmp230 =  (int32_t)3;

uint32_t* tmp231 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)384);
Concat2T444( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)384,  (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp220,  (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp228, tmp230, tmp231);
ClearMemPublic(tmp230);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp220);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)192, tmp228);

uint32_t* tmp235 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)384,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp231, tmp39, tmp235);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)384, tmp231);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)64, tmp39);

uint32_t* tmp238 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64);
ScaleUp1( (int32_t)64, tmp40,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64, tmp235, tmp40, tmp238);
ClearMemSecret1( (int32_t)64, tmp40);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64, tmp235);

uint32_t* tmp241 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64, tmp238, tmp241,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64, tmp238);

uint32_t* tmp243 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp241, tmp41, tmp243);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256, tmp41);

uint32_t* tmp245 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
ScaleUp1( (int32_t)256, tmp42,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp243, tmp42, tmp245);
ClearMemSecret1( (int32_t)256, tmp42);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp243);

uint32_t* tmp248 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp245, tmp248,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp245);

uint32_t* tmp250 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp241, tmp43, tmp250);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)256, tmp43);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64, tmp241);

uint32_t* tmp253 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
ScaleUp1( (int32_t)256, tmp44,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp250, tmp44, tmp253);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp250);
ClearMemSecret1( (int32_t)256, tmp44);

uint32_t* tmp256 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp253, tmp256,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp253);

int32_t tmp258 =  (int32_t)3;

uint32_t* tmp259 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)512);
Concat2T444( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)512,  (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp248,  (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp256, tmp258, tmp259);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp248);
ClearMemPublic(tmp258);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp256);

uint32_t* tmp263 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp259, tmp45, tmp263);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)64, tmp45);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)512, tmp259);

uint32_t* tmp266 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64);
ScaleUp1( (int32_t)64, tmp46,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64, tmp263, tmp46, tmp266);
ClearMemSecret1( (int32_t)64, tmp46);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64, tmp263);

uint32_t* tmp269 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64, tmp266, tmp269,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64, tmp266);

uint32_t* tmp271 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp269, tmp47, tmp271);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256, tmp47);

uint32_t* tmp273 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
ScaleUp1( (int32_t)256, tmp48,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp271, tmp48, tmp273);
ClearMemSecret1( (int32_t)256, tmp48);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp271);

uint32_t* tmp276 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp273, tmp276,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp273);

uint32_t* tmp278 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp269, tmp49, tmp278);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)256, tmp49);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)64, tmp269);

uint32_t* tmp281 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
ScaleUp1( (int32_t)256, tmp50,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp278, tmp50, tmp281);
ClearMemSecret1( (int32_t)256, tmp50);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp278);

uint32_t* tmp284 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp281, tmp284,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp281);

int32_t tmp286 =  (int32_t)3;

uint32_t* tmp287 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)512);
Concat2T444( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)512,  (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp276,  (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp284, tmp286, tmp287);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp276);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)256, tmp284);
ClearMemPublic(tmp286);

uint32_t* tmp291 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)1000);
Conv2DWrapper( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1000,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp287, tmp51, tmp291);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)1000, tmp51);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)512, tmp287);

uint32_t* tmp294 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)1000);
ScaleUp1( (int32_t)1000, tmp52,  (int32_t)9);
MatAddBroadCast4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)1000, tmp291, tmp52, tmp294);
ClearMemSecret1( (int32_t)1000, tmp52);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)1000, tmp291);

uint32_t* tmp297 = make_array<uint32_t>( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)1000);
Relu4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)1000, tmp294, tmp297,  (int32_t)9, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)1000, tmp294);

uint32_t* tmp299 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000);
AvgPool( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000,  (int32_t)13,  (int32_t)13,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)1000, tmp297, tmp299);
ClearMemSecret4( (int32_t)1,  (int32_t)13,  (int32_t)13,  (int32_t)1000, tmp297);

int32_t tmp301 =  (int32_t)3;

uint32_t* tmp302 = make_array<uint32_t>( (int32_t)1,  (int32_t)1,  (int32_t)1);
ArgMax3( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000, tmp299, tmp301, tmp302);
ClearMemPublic(tmp301);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000, tmp299);
EndComputation();
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
cout << (funcReconstruct2PCCons(Arr3DIdxRowM(tmp302, (int32_t)1, (int32_t)1, (int32_t)1,i0,i1,i2), 2)) << endl;
}
}
}
}

